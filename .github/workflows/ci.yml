name: CI

on:
  push:
    branches: [ zephyr-newlib-3.3.0 ]
  pull_request:
    branches: [ zephyr-newlib-3.3.0 ]
  release:
    types: [ published ]

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: [ self-hosted, linux, x64, large ]

    strategy:
      fail-fast: false
      matrix:
        target:
        - arc-none-elf
      # - arc64-none-elf
        - arm-none-eabi
        - aarch64-none-elf
        - mips-none-elf
        - nios2-none-elf
        - riscv64-none-elf
        - sparc-none-elf
        - x86_64-none-elf
      # - xtensa-none-elf

    steps:
    - name: Print environment information
      run: |
        uname -a
        df -h
        gcc --version
        ld --version
        make --version
        autoconf --version
        automake --version
        cmake --version
        flex --version
        bison --version

    - name: Check out source code
      uses: actions/checkout@v2
      with:
        path: src

    - name: Create work directories
      run: |
        rm -rf crosstool
        mkdir crosstool
        rm -rf build
        mkdir build
        rm -rf ${{ matrix.target }}
        mkdir ${{ matrix.target }}
        rm -rf upload
        mkdir upload

    - name: Download cross toolchain
      run: |
        cd crosstool
        wget -O binutils_${{ matrix.target }}.tar.gz https://github.com/Centrinix/zephyr-binutils/releases/download/test3/${{ matrix.target }}.tar.gz
        wget -O gcc_${{ matrix.target }}.tar.gz https://github.com/Centrinix/zephyr-gcc/releases/download/test1/${{ matrix.target }}.tar.gz
        tar xvf binutils_${{ matrix.target }}.tar.gz
        tar xvf gcc_${{ matrix.target }}.tar.gz
        echo "${GITHUB_WORKSPACE}/crosstool/${{ matrix.target }}/bin" >> $GITHUB_PATH

    - name: Configure newlib
      run: |
        cd build
        ../src/configure \
          --prefix=/ \
          --target=${{ matrix.target }} \
          --enable-newlib-io-float \
          --disable-newlib-io-long-double \
          --disable-newlib-supplied-syscalls \
          --disable-newlib-io-pos-args \
          --disable-newlib-io-c99-formats \
          --enable-newlib-io-long-long \
          --disable-newlib-register-fini \
          --disable-newlib-nano-malloc \
          --disable-newlib-nano-formatted-io \
          --enable-newlib-atexit-dynamic-alloc \
          --enable-newlib-global-atexit \
          --enable-lite-exit \
          --disable-newlib-reent-small \
          --enable-newlib-multithread \
          --enable-newlib-retargetable-locking \
          --disable-newlib-wide-orient \
          --disable-newlib-fseek-optimization \
          --enable-newlib-fvwrite-in-streamio \
          --enable-newlib-unbuf-stream-opt \
          --disable-target-optspace \
          --enable-multilib

    - name: Build newlib
      run: |
        cd build
        make -j16 all
        make DESTDIR=${GITHUB_WORKSPACE}/${{ matrix.target }} install

    - name: Archive artifact
      run: |
        cd upload
        tar -zcvf ${{ matrix.target }}.tar.gz --owner=0 --group=0 \
            -C .. ${{ matrix.target }}

    - name: Upload artifact
      if: github.event_name != 'release'
      uses: actions/upload-artifact@v2
      with:
        name: newlib_${{ matrix.target }}
        path: upload/${{ matrix.target }}.tar.gz

    - name: Upload release asset
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: upload/${{ matrix.target }}.tar.gz
        asset_name: ${{ matrix.target }}.tar.gz
        asset_content_type: application/octet-stream
